import pandas as pd
from jinja2 import Environment, FileSystemLoader, TemplateNotFound
from collections import defaultdict
import argparse
import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import datetime

load_dotenv()

FOUNDATION_YEAR = int(os.getenv('WINE_FOUNDATION_YEAR', '1920'))
DEFAULT_EXCEL_FILEPATH = os.getenv('WINE_EXCEL_FILE', 'wine_price_list.xlsx')
DEFAULT_TEMPLATE_FILEPATH = os.getenv('WINE_TEMPLATE_FILE', 'template.html')
DEFAULT_OUTPUT_FILEPATH = os.getenv('WINE_OUTPUT_FILE', 'index.html')


def create_parser():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∞–π—Ç–∞ –≤–∏–Ω–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞')
    parser.add_argument('--excel-file', default=DEFAULT_EXCEL_FILEPATH,
                       help=f'–ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_EXCEL_FILEPATH})')
    parser.add_argument('--template', default=DEFAULT_TEMPLATE_FILEPATH,
                       help=f'–ü—É—Ç—å –∫ HTML —à–∞–±–ª–æ–Ω—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_TEMPLATE_FILEPATH})')
    parser.add_argument('--output', default=DEFAULT_OUTPUT_FILEPATH,
                       help=f'–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {DEFAULT_OUTPUT_FILEPATH})')
    parser.add_argument('--foundation-year', type=int, default=FOUNDATION_YEAR,
                       help=f'–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –≤–∏–Ω–æ–¥–µ–ª—å–Ω–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {FOUNDATION_YEAR})')
    return parser


def calculate_winery_age(foundation_year, current_year):
    return current_year - foundation_year


def get_year_word(years):
    if 11 <= years % 100 <= 14:
        return "–ª–µ—Ç"
    last_digit = years % 10
    return "–≥–æ–¥" if last_digit == 1 else "–≥–æ–¥–∞" if 2 <= last_digit <= 4 else "–ª–µ—Ç"


def read_excel_file(file_path):
    if not Path(file_path).is_file():
        raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
    return pd.read_excel(file_path, na_values=['', ' ', 'N/A', 'NULL'], keep_default_na=False)


def validate_catalog_columns(catalog):
    required_columns = {'–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ù–∞–∑–≤–∞–Ω–∏–µ', '–¶–µ–Ω–∞', '–ö–∞—Ä—Ç–∏–Ω–∫–∞'}
    missing = required_columns - set(catalog.columns)
    if missing:
        raise KeyError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")


def extract_wine(row):
    return {
        'name': row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
        'grape_type': row.get('–°–æ—Ä—Ç', ''),
        'price': row['–¶–µ–Ω–∞'],
        'image': row['–ö–∞—Ä—Ç–∏–Ω–∫–∞'],
        'promotion': row.get('–ê–∫—Ü–∏—è', '')
    }


def group_by_category(catalog):
    grouped = defaultdict(list)
    for _, row in catalog.iterrows():
        wine = extract_wine(row)
        grouped[row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']].append(wine)
    return grouped


def create_template_environment():
    return Environment(loader=FileSystemLoader('.'))


def render_template(env, template_filepath, context):
    return env.get_template(template_filepath).render(**context)


def save_html(content, output_filepath):
    with open(output_filepath, 'w', encoding='utf-8') as file:
        file.write(content)


def render_catalog_page(catalog, years, year_word, template_filepath, output_filepath):
    env = create_template_environment()
    context = {'winery_years': years, 'year_word': year_word, 'wines': catalog}
    html = render_template(env, template_filepath, context)
    save_html(html, output_filepath)


def count_wines(catalog):
    return sum(len(wines) for wines in catalog.values())


def print_category_stats(catalog):
    for category, wines in catalog.items():
        print(f"     - {category}: {len(wines)}")


def show_report(catalog, years, year_word, config):
    print(f"\nüìä –û—Ç—á–µ—Ç:")
    print(f"   ‚Ä¢ –í–∏–Ω–æ–¥–µ–ª—å–Ω–µ: {years} {year_word}")
    print(f"   ‚Ä¢ –§–∞–π–ª: {config['excel_filepath']}")
    print(f"   ‚Ä¢ –®–∞–±–ª–æ–Ω: {config['template_filepath']}")
    print(f"   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç: {config['output_filepath']}")
    print("   ‚Ä¢ –í–∏–Ω–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    print_category_stats(catalog)
    print(f"   ‚Ä¢ –í—Å–µ–≥–æ: {count_wines(catalog)}")


def main():
    parser = create_parser()
    args = parser.parse_args()

    current_year = datetime.now().year

    excel_filepath = args.excel_file
    template_filepath = args.template
    output_filepath = args.output

    config = {
        'excel_filepath': excel_filepath,
        'template_filepath': template_filepath,
        'output_filepath': output_filepath,
        'foundation_year': args.foundation_year,
        'current_year': current_year
    }

    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∞–π—Ç–∞")
    print(f"‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config}")

    years = calculate_winery_age(config['foundation_year'], config['current_year'])
    year_word = get_year_word(years)

   
    try:
        catalog_df = read_excel_file(config['excel_filepath'])
        validate_catalog_columns(catalog_df)
        catalog = group_by_category(catalog_df)
        print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –≤–∏–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏ —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω")
    except FileNotFoundError as e:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return
    except pd.errors.EmptyDataError:
        print("‚ùå –û—à–∏–±–∫–∞: Excel-—Ñ–∞–π–ª –ø—É—Å—Ç")
        return
    except pd.errors.ParserError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel: {e}")
        return
    except KeyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    try:
        render_catalog_page(
            catalog,
            years,
            year_word,
            config['template_filepath'],
            config['output_filepath']
        )
        print("‚úÖ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞")
    except TemplateNotFound as e:
        print(f"‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        return
    except (OSError, IOError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
        return

    show_report(catalog, years, year_word, config)


if __name__ == "__main__":
    main()
